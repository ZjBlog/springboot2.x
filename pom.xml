<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>spring</groupId>
	<artifactId>springboot2.x</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>springboot2.x</name>
	<description>Demo project for Spring Boot</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.0.3.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
        <docker.image.prefix>registry.cn-hangzhou.aliyuncs.com</docker.image.prefix>
		<docker.image.repository>zjdocker/test</docker.image.repository>
		<tag>1.0</tag>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- jsoup HTML parser library @ https://jsoup.org/ -->
			<groupId>org.jsoup</groupId>
			<artifactId>jsoup</artifactId>
			<version>1.11.3</version>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-amqp</artifactId>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-plugin</artifactId>
                <version>1.3.6</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>build</goal>
							<!--<goal>push</goal>-->
						</goals>
					</execution>
				</executions>
                <configuration>
                    <!--<repository>${docker.image.prefix}/${project.artifactId}</repository>-->
					<repository>${docker.image.prefix}/${docker.image.repository}</repository>
                    <useMavenSettingsForAuth>true</useMavenSettingsForAuth>
                    <!-- 在setting.xml中配置
                    <servers>
                      <server>
                        <id>registry.cn-hangzhou.aliyuncs.com</id>
                        <username>793953767@qq.com</username>
                        <password>12345</password>
                      </server>
                    </servers>
                    -->
					<tag>${tag}</tag>
                    <buildArgs>
                        <JAR_FILE>target/${project.build.finalName}.jar</JAR_FILE>
                    </buildArgs>
                </configuration>
            </plugin>
			<!-- 另一个打包工具
			imageName:镜像的名称，可以通过${project.groupId}/${project.artifactId}:${project.version} 动态制定镜像名称
当然也可以在前面加上镜像地址，比如127.0.0.1:5000,以声明将构建好的镜像存储在本地
baseImage: 基础镜像，这里是相当于Dockerfile的FROM java
resources 下的配置：构建时会生成docker文件夹，这里指生成文件夹的内容来源，包含了mvn clean package 之后的target的文件和生成的jar包。
			https://www.jianshu.com/p/3b91b8958c3e-->
			<!--<plugin>-->
				<!--<groupId>com.spotify</groupId>-->
				<!--<artifactId>docker-maven-plugin</artifactId>-->
				<!--<version>1.2.0</version>-->
				<!--<configuration>-->
					<!--<imageName>example</imageName>-->
					<!--<baseImage>java</baseImage>-->
					<!--<entryPoint>["java", "-jar", "/${project.build.finalName}.jar"]</entryPoint>-->
					<!--&lt;!&ndash; copy the service's jar file from target into the root directory of the image &ndash;&gt;-->
					<!--<resources>-->
						<!--<resource>-->
							<!--<targetPath>/</targetPath>-->
							<!--<directory>${project.build.directory}</directory>-->
							<!--<include>${project.build.finalName}.jar</include>-->
						<!--</resource>-->
					<!--</resources>-->
				<!--</configuration>-->
			<!--</plugin>-->
		</plugins>
	</build>


</project>
